{"version":3,"file":"static/js/912.efb57a6e.chunk.js","mappings":"6MAqFA,EApEuC,SAAH,GAA0C,IAApCA,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aACzD,GAAiFC,EAAAA,EAAAA,IAAuB,CACvGC,cAAe,CACdC,MAAO,GACPC,SAAU,GACVL,QAAS,MAJHM,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAA0BC,EAAM,EAAnBC,UAAaD,QAQpEE,EAAAA,EAAAA,YAAU,WACLX,GACHO,EAAS,QAAS,CAAEK,KAAM,cAAeC,QAASb,EAAa,IAEjE,GAAG,CAACA,IAMJ,OACC,kBACCc,UAAU,4BACVC,SAAUT,GAPK,SAACU,GACjBlB,EAAMkB,EACP,IAKmC,UAChCP,EAAOQ,QAAS,iBAAKH,UAAU,oBAAmB,UAAC,UAAQL,EAAOQ,MAAMJ,YACzE,iBAAKC,UAAU,mBAAkB,WAChC,kBAAOA,UAAU,OAAM,SAAC,aAGxB,0BACCA,UAAU,uBACVF,KAAK,OACLM,YAAY,UACRb,EAAS,eAEf,iBAAKS,UAAU,mBAAkB,WAChC,kBAAOA,UAAU,OAAM,SAAC,eAGxB,0BACCA,UAAU,uBACVF,KAAK,WACLM,YAAY,YACRb,EAAS,iBAEdN,IACA,iBAAKe,UAAU,OAAM,WACpB,gBAAKA,UAAU,sCAAqC,UACnD,gBAAKK,IAAKpB,EAASqB,IAAI,QAExB,4BACC,kBAAON,UAAU,GAAE,SAAC,4CAGpB,0BACCA,UAAU,oBACVF,KAAK,OACLM,YAAY,WACRb,EAAS,oBAIjB,mBAAQS,UAAU,oCACjBO,QAAS,kBAAMb,EAAY,QAAQ,EACnCI,KAAK,SAAQ,SAAC,YAGlB,EC1DA,EAdmC,SAAH,GAAkD,IAA5Cd,EAAK,EAALA,MAAOwB,EAAM,EAANA,OAAQvB,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAC7D,OAAIsB,GACI,SAAC,KAAQ,CAACC,GAAG,cAIpB,iBACCT,UAAU,iBAAgB,WAC1B,eAAIA,UAAU,0BAAyB,SAAC,WACxC,SAAC,EAAS,CAACd,aAAcA,EAAcF,MAAOA,EAAOC,QAASA,MAGjE,E,SCgBA,GAAeyB,EAAAA,EAAAA,KARS,SAACC,GACxB,MAAO,CACNH,OAAQG,EAAMC,OAAOJ,OACrBvB,QAAS0B,EAAMC,OAAO3B,QACtBC,aAAcyB,EAAMC,OAAOC,KAAKlB,OAElC,GAGmB,CAAEX,MAAAA,EAAAA,GAAO8B,aAAcC,EAAAA,GAAAA,eAD1C,EAlB4C,SAAH,GAAgE,IAA1D/B,EAAK,EAALA,MAAOwB,EAAM,EAANA,OAAQvB,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAc4B,EAAY,EAAZA,aAKpF,OAJAjB,EAAAA,EAAAA,YAAU,WACTiB,EAAa,KACd,GAAG,KAGF,SAAC,EAAK,CAAC5B,aAAcA,EAAcF,MAAOA,EAAOC,QAASA,EAASuB,OAAQA,GAE7E,G","sources":["components/pages/Login/LoginForm.tsx","components/pages/Login/Login.tsx","components/pages/Login/LoginContainer.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\"\r\nimport { loginFormDataType } from \"../../../types/types\";\r\n\r\ntype LoginFormType = {\r\n\temail: string\r\n\tpassword: string\r\n\tcaptcha: string\r\n\t_form: null | string\r\n}\r\n\r\ntype PropsType = {\r\n\tlogin: (LoginFormData: loginFormDataType) => void\r\n\tcaptcha: null | string\r\n\tserverErrors: Array<string> | null\r\n}\r\n\r\nconst LoginForm: React.FC<PropsType> = ({ login, captcha, serverErrors }) => {\r\n\tconst { register, handleSubmit, setError, clearErrors, formState: { errors } } = useForm<LoginFormType>({\r\n\t\tdefaultValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\tcaptcha: '',\r\n\t\t}\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tif (serverErrors) {\r\n\t\t\tsetError('_form', { type: 'server side', message: serverErrors[0] })\r\n\t\t}\r\n\t}, [serverErrors])\r\n\r\n\tconst onSubmit = (formData: LoginFormType) => {\r\n\t\tlogin(formData);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tclassName=\"flex flex-col items-start\"\r\n\t\t\tonSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t{errors._form && <div className='text-red-700 mb-2'>Error: {errors._form.message}</div>}\r\n\t\t\t<div className=\"mb-2 flex w-full\">\r\n\t\t\t\t<label className=\"mr-2\">\r\n\t\t\t\t\tE-mail:\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"flex-auto border-b-2\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"e-mail\"\r\n\t\t\t\t\t{...register('email')} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"mb-2 flex w-full\">\r\n\t\t\t\t<label className=\"mr-2\">\r\n\t\t\t\t\tPassword:\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"flex-auto border-b-2\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tplaceholder=\"password\"\r\n\t\t\t\t\t{...register('password')} />\r\n\t\t\t</div>\r\n\t\t\t{captcha &&\r\n\t\t\t\t<div className=\"mb-2\">\r\n\t\t\t\t\t<div className=\"border-2 border-red-700 inline-flex\">\r\n\t\t\t\t\t\t<img src={captcha} alt=\"\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label className=\"\">\r\n\t\t\t\t\t\t\tEnter the characters from the picture:\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclassName=\"w-full border-b-2\"\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tplaceholder=\"captcha\"\r\n\t\t\t\t\t\t\t{...register('captcha')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>}\r\n\t\t\t<button className=\"border-2 py-1 px-5 rounded-[10px]\"\r\n\t\t\t\tonClick={() => clearErrors('_form')}\r\n\t\t\t\ttype=\"submit\">Login</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default LoginForm","import { Navigate } from \"react-router-dom\"\r\nimport { loginFormDataType } from \"../../../types/types\"\r\nimport LoginForm from \"./LoginForm\"\r\n\r\ntype propsType = {\r\n\tlogin: (LoginFormData: loginFormDataType) => void\r\n\tisAuth: boolean\r\n\tcaptcha: string | null\r\n\tserverErrors: Array<string> | null\r\n}\r\n\r\nconst Login: React.FC<propsType> = ({ login, isAuth, captcha, serverErrors }) => {\r\n\tif (isAuth) {\r\n\t\treturn <Navigate to='/profile' />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"text-start p-4\">\r\n\t\t\t<h2 className=\"text-2xl font-bold mb-2\">Login</h2>\r\n\t\t\t<LoginForm serverErrors={serverErrors} login={login} captcha={captcha} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Login;","import { connect } from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport { login } from \"../../../redux/authMeReducer\";\r\nimport { appStateType } from \"../../../redux/store\";\r\nimport { loginFormDataType } from \"../../../types/types\";\r\nimport { actions } from \"../../../redux/authMeReducer\";\r\nimport { useEffect } from \"react\";\r\n\r\ntype mapStatePropsType = {\r\n\tisAuth: boolean\r\n\tcaptcha: string | null\r\n\tserverErrors: Array<string> | null\r\n}\r\ntype mapDispatchPropsType = {\r\n\tlogin: (LoginFormData: loginFormDataType) => void\r\n\tsetFormError: (errors: Array<string> | null) => void\r\n}\r\n\r\ntype ownPropsType = {}\r\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownPropsType\r\n\r\nconst LoginContainer: React.FC<propsType> = ({ login, isAuth, captcha, serverErrors, setFormError }) => {\r\n\tuseEffect(() => {\r\n\t\tsetFormError(null)\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<Login serverErrors={serverErrors} login={login} captcha={captcha} isAuth={isAuth} />\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state: appStateType): mapStatePropsType => {\r\n\treturn {\r\n\t\tisAuth: state.authMe.isAuth,\r\n\t\tcaptcha: state.authMe.captcha,\r\n\t\tserverErrors: state.authMe.form.errors\r\n\t}\r\n}\r\n\r\nexport default connect<mapStatePropsType, mapDispatchPropsType, ownPropsType, appStateType>\r\n\t(mapStateToProps, { login, setFormError: actions.setFormErrors })(LoginContainer);"],"names":["login","captcha","serverErrors","useForm","defaultValues","email","password","register","handleSubmit","setError","clearErrors","errors","formState","useEffect","type","message","className","onSubmit","formData","_form","placeholder","src","alt","onClick","isAuth","to","connect","state","authMe","form","setFormError","actions"],"sourceRoot":""}