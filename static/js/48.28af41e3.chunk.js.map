{"version":3,"file":"static/js/48.28af41e3.chunk.js","mappings":"yOAaMA,EAAqB,WAE1B,OACC,gBAAKC,UAAU,MAAK,UACnB,SAAC,EAAI,KAGR,EAEA,EAAeC,EAAAA,KAAWF,GAEpBG,EAAiB,WAEtB,IAAMC,GAAgBC,EAAAA,EAAAA,QAAuB,MAEvCC,GAAwBC,EAAAA,EAAAA,OAE9BC,EAAAA,EAAAA,YAAU,WAGT,OAFAF,GAASG,EAAAA,EAAAA,OAEF,WACNH,GAASI,EAAAA,EAAAA,MACV,CACD,GAAG,IAEH,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,QAAQ,IAEzE,GAAwCI,EAAAA,EAAAA,WAAS,GAAK,eAA/CC,EAAY,KAAEC,EAAe,KAepC,OAJAT,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACfQ,IAAqC,QAAzB,EAAIZ,EAAcc,eAAO,OAArB,EAAuBC,iBACxC,GAAG,CAACR,KAGH,4BACC,iBAAKS,SAfe,SAACC,GACtB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,IACjFX,GAAgB,GAEhBA,GAAgB,EAElB,EAQgChB,UAAU,wDAAuD,UAErF,OAARU,QAAQ,IAARA,OAAQ,EAARA,EAAUkB,KAAI,SAACC,EAAsBC,GACpC,OACC,SAACC,EAAO,CAAcF,QAASA,EAASC,MAAOA,GAAjCE,MAEhB,KAED,gBAAKC,IAAK9B,QAGX,SAAC+B,EAAe,MAGnB,EAEMH,EAA6D9B,EAAAA,MAAW,YAAyB,IAAtB4B,EAAO,EAAPA,QAASC,EAAK,EAALA,MACzF,OACC,iBAAiB9B,UAAU,wCAAuC,WACjE,iBAAKA,UAAU,kBAAiB,WAC/B,SAAC,KAAO,CAACA,UAAU,0EAA0EmC,GAAE,mBAAcN,EAAQO,QAAS,UAC7H,gBAAKC,IAAKR,EAAQS,OAASC,OAE5B,yBACEV,EAAQW,eAGX,yBACEX,EAAQA,YAVDC,EAcZ,IAEMI,EAA4B,SAAH,IC3FhB,SAAmCO,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,sBAAwBD,EAC/D,CDyF4C,IAC3C,OAA8B3B,EAAAA,EAAAA,UAAiB,IAAG,eAA3Ce,EAAO,KAAEc,EAAU,KAEpBC,GAAWjC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKgC,MAAM,IAEjExC,GAAwBC,EAAAA,EAAAA,MAa9B,OACC,iBAAKN,UAAU,aAAY,WAC1B,qBAAU8C,MAAOjB,EAASkB,SAAU,SAAC3B,GAAC,OAbvB,SAACS,GACjBc,EAAWd,EACZ,CAW6CkB,CAAS3B,EAAEE,cAAcwB,MAAM,EAAE9C,UAAU,mRAAmRgD,KAAK,MAC9W,mBAAQC,SAAuB,UAAbL,EAAsBM,QAAS,kBAVxB,SAACrB,GACvBA,GACHxB,GAAS8C,EAAAA,EAAAA,IAAYtB,IAEtBc,EAAW,GACZ,CAKyDS,CAAmBvB,EAAQ,EAAE7B,UAAU,oCAAmC,SAAC,WAGrI,C,mBEhFAqD,EAAOC,QA9BP,WAoBC,IAnBA,IAAMC,EAAY,CACjB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEGvB,EAAO,GACFwB,EAAI,EAAGA,EAAI,GAAIA,IAEtBxB,EAAKwB,GADI,IAANA,GAAiB,KAANA,GAAkB,KAANA,GAAkB,KAANA,EAC5B,IAEAD,EAAUhC,KAAKkC,KAAKlC,KAAKmC,SAAWH,EAAUI,OAAS,IAGnE,OAAO3B,EAAK4B,KAAK,GAClB,C","sources":["components/pages/Chat/Chat.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/react-uuid/uuid.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { AnyAction } from \"redux\"\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { MessageType } from \"../../../API/chat-api\"\r\nimport avatar from '../../../assets/img/avatar.jpg'\r\nimport { start, stop, sendMessage } from \"../../../redux/chatReducer\"\r\nimport { appStateType } from \"../../../redux/store\"\r\nimport uuid from 'react-uuid'\r\n\r\ntype AppDispatch = ThunkDispatch<appStateType, any, AnyAction>;\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n\treturn (\r\n\t\t<div className=\"p-4\">\r\n\t\t\t<Chat />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default React.memo(ChatPage);\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n\tconst scrollElement = useRef<HTMLDivElement>(null)\r\n\r\n\tconst dispatch: AppDispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(start())\r\n\r\n\t\treturn () => {\r\n\t\t\tdispatch(stop())\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst messages = useSelector((state: appStateType) => state.chat.messages)\r\n\r\n\tconst [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n\tconst scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n\t\tconst element = e.currentTarget;\r\n\t\tif (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n\t\t\tsetIsAutoScroll(true)\r\n\t\t} else {\r\n\t\t\tsetIsAutoScroll(false)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tisAutoScroll && scrollElement.current?.scrollIntoView();\r\n\t}, [messages])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div onScroll={scrollHandler} className='flex flex-col gap-2 mb-3 h-[350px] pr-2 overflow-auto'>\r\n\t\t\t\t{\r\n\t\t\t\t\tmessages?.map((message: MessageType, index: number) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Message key={uuid()} message={message} index={index} />\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t<div ref={scrollElement}></div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<ChatMessageForm />\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nconst Message: React.FC<{ message: MessageType, index: number }> = React.memo(({ message, index }) => {\r\n\treturn (\r\n\t\t<div key={index} className='text-start p-1 border-2 rounded-[7px]'>\r\n\t\t\t<div className='flex mb-1 gap-2'>\r\n\t\t\t\t<NavLink className='w-[50px] h-[50px] rounded-[50%] overflow-hidden border-2 border-red-700' to={`/profile/${message.userId}`}>\r\n\t\t\t\t\t<img src={message.photo || avatar} />\r\n\t\t\t\t</NavLink>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{message.userName}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{message.message}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\nconst ChatMessageForm: React.FC = ({ }) => {\r\n\tconst [message, setMessage] = useState<string>('')\r\n\r\n\tconst statusWS = useSelector((state: appStateType) => state.chat.status)\r\n\r\n\tconst dispatch: AppDispatch = useDispatch()\r\n\r\n\tconst onChange = (message: string) => {\r\n\t\tsetMessage(message)\r\n\t}\r\n\r\n\tconst sendMessageHandler = (message: string) => {\r\n\t\tif (message) {\r\n\t\t\tdispatch(sendMessage(message))\r\n\t\t}\r\n\t\tsetMessage('')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"text-start\">\r\n\t\t\t<textarea value={message} onChange={(e) => onChange(e.currentTarget.value)} className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-red-500 mb-2 resize-none focus:border-red-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-red-500 dark:focus:border-red-500\" name=\"\"></textarea>\r\n\t\t\t<button disabled={statusWS !== 'ready'} onClick={() => sendMessageHandler(message)} className=\"border-2 py-1 px-5 rounded-[10px]\">Send</button>\r\n\t\t</div>\r\n\t)\r\n}","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n\tconst hashTable = [\n\t\t\"a\",\n\t\t\"b\",\n\t\t\"c\",\n\t\t\"d\",\n\t\t\"e\",\n\t\t\"f\",\n\t\t\"0\",\n\t\t\"1\",\n\t\t\"2\",\n\t\t\"3\",\n\t\t\"4\",\n\t\t\"5\",\n\t\t\"6\",\n\t\t\"7\",\n\t\t\"8\",\n\t\t\"9\",\n\t];\n\tlet uuid = [];\n\tfor (let i = 0; i < 36; i++) {\n\t\tif (i === 8 || i === 13 || i === 18 || i === 23) {\n\t\t\tuuid[i] = \"-\";\n\t\t} else {\n\t\t\tuuid[i] = hashTable[Math.ceil(Math.random() * hashTable.length - 1)];\n\t\t}\n\t}\n\treturn uuid.join(\"\");\n}\n\nmodule.exports = uuid;\n"],"names":["ChatPage","className","React","Chat","scrollElement","useRef","dispatch","useDispatch","useEffect","start","stop","messages","useSelector","state","chat","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","index","Message","uuid","ref","ChatMessageForm","to","userId","src","photo","avatar","userName","obj","TypeError","setMessage","statusWS","status","value","onChange","name","disabled","onClick","sendMessage","sendMessageHandler","module","exports","hashTable","i","ceil","random","length","join"],"sourceRoot":""}